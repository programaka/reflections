1. What happens when you initialize a repository? Why do you need to do it?

.git directory is created that will store metadata about all the changes that will be made to you repository.

You need to create repository to be able to use all of the version control features you've learned: commit, log, checkout etc.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

It holds your files that you want to commit.

3. How can you use the staging area to make sure you have one commit per logical change?

A logical change can affect multiple files and you use the staging area to add those files and then commit them all together.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

For every new feature of bug fix, or if you want to refactor something, or experiment with something.

5. How do the diagrams help you visualize the branch structure?

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

If there are no conflicts in your code, of course it is best to automate that process, since algorithm is straightforward.
But in case the same part of the code was changed by more than 1 people, it's not that easy to create an algorithm that will resolve that conflict.
